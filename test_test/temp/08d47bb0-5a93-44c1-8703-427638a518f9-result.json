{"name": "test_01", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "api = <playwright._impl._fetch.APIRequestContext object at 0x10e041420>\n\n    def test_01(api):\n        data = {\n          \"form_slug\": \"vap_douyin_list\",\n          \"limit\": 500,\n          \"offset\": 0,\n          \"order_by\": [],\n          \"filter_entities\": [\n            {\n              \"filter_key\": \"status\",\n              \"operation\": 8,\n              \"filter_value\": \"[\\\"1\\\",\\\"4\\\"]\"\n            }\n          ],\n          \"relation\": 1\n        }\n        response = api.post('/graphql', data=data)\n>       print(response.json())\n\ntest_alivia_api.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../whale01/venv/lib/python3.10/site-packages/playwright/sync_api/_generated.py:13745: in json\n    return mapping.from_maybe_impl(self._sync(self._impl_obj.json()))\n../../whale01/venv/lib/python3.10/site-packages/playwright/_impl/_fetch.py:401: in json\n    return json.loads(content)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10c2e30a0>\ns = 'Must provide query string.', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/decoder.py:355: JSONDecodeError"}, "start": 1662378831747, "stop": 1662378831876, "uuid": "c678b974-a942-4d8e-85ef-e95ea2ae5525", "historyId": "9df2173e24e4fb29b4a959290939f303", "testCaseId": "cafbacc90731e12c5fb5092fb2c3ae4d", "fullName": "test_test.test_alivia_api#test_01", "labels": [{"name": "parentSuite", "value": "test_test"}, {"name": "suite", "value": "test_alivia_api"}, {"name": "host", "value": "edydeMacBook-Pro-10.local"}, {"name": "thread", "value": "14641-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_test.test_alivia_api"}]}